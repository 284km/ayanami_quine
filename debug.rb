aa = <<EOM
00000000000000000000000000111111111110000000000000000000000000000000000000000000
00000000000000000000001111111111111111111111000000000000000000000000000000000000
00000000000000000001111111110111111111100111111101000000000000000000000000000000
00000000000000000001011111011110111011100111110100000000000000000000000000000000
00000000000000000011010111110010011111111101001100000000000000000000000000000000
00000000000000000000000011010111111111000010000000000000000000000000000000000000
00000000000000000000000000011100101100001100000000000000000000000000000000000000
00000000000000000000000000000000111000011111111000000000000000000000000000000000
00000000000000000000000000000001110001000011111111110000000000000000000000000000
00000000000000000000000000000011101000000011011111111000000000000000000000000000
00000000000000000000000000001110000000001000111111000000000000000000000000000000
00000000000000000000000000001000000000000010001100101110000000000000000000000000
00000000000000000000000001100011011000011010001101100000000000000000000000000000
00000000000000000000001000001100000000110111111111111110000000000000000000000000
00000000000000000000100001110000000111111111111111111110000000000000000000000000
00000000000000000110011000000000011111111111111111111111111100000000000000000000
00000000000000110000001000000000001111111111111111111111111111111000000000000000
00000000000111110000010010000000011111111111111111111111111111111110000000000000
00000000000011101110101000000001111111111111111111111111111111111000000000000000
00000010111111111111100000001111111111111111111111111111111111000000000000000000
00001000111111111110000111111111111111111111111111111111110000000000000000000000
00000100000000000000001000111111111111111111111111111100111100000000000011100000
00000100001100100000100111111111111111111110011000111111111111111011011011000000
00000010000000000000001001111111111111110011111111111111111011000000000000000000
00000010110000000000000111100111111111111111111111011101100100110000111011000100
00000000000101101000010000011100000100101100110000000010100100000110000000000000
00000000000000000000000000000000000000000000000000000000001100000000000000000000
EOM

bits = aa.gsub("\n", "").reverse.to_i(2)

puts bits #=> 906694364710971881029728
#
# # AA構造データを整数文字列で表した時の長さ
# puts bits.to_s.length #=> 24
#
# # AA中の文字の数
# puts aa.count('1')  #=> 660

# 今回はAAの構造データをそのまま整数でQuineコード中に入れようとすると長すぎてうまくいかない．そこで，構造データをMarshal.dumpでバイト列化(シリアライズ)し，Array#packでBase64エンコード(バイト列を印字可能な文字で表現)して整数を表すことにする

bin = [Marshal.dump(bits)].pack("m").gsub("\n", "")
puts bin #=> BAhsKwpgAAAAAAAAAADA
puts bin.length #=> 20

# # 0.upto(27*80-1) do |i|
# #   print bits[i] == 1 ? 1 : " ";
# #   print "\n" if i % 80 == 79
# # end

# 情報部
# AA構造データのBase64文字列を直書き．
# b = "BAhsKwpgAAAAAAAAAADA"
b = bin

# デコード部
# Base64文字列をデコードしてバイナリ文字列を取得し，Marshal.loadでデシリアライズして実際の数値を得る．
n=Marshal.load(b.unpack("m")[0])

# $sにソースコードに見立てたダミーの文字列を入れておく
# 長さはQuineコード全体のバイト数程度にし，末尾に#を入れる
$s = "A" * 700 + "#"

# Quine部
# 出力用の文字列を作る．
e="eval$s=%w"<<39<<($s*3)
# eにQuineプログラムの出力文字列を代入している．39はシングルクォート「'」のASCIIコード．「'」は後でQuineコード全体をくくるのに使うので，コード中で直接使うことはできない．グローバル変数$sはまだ用意していないが，これに「eval$s=%w'」と「'.join」を除くQuineコード全体が入っているものと見立ててプログラムを書いていく．$sのコードは何度か循環させておく．

# 出力部
# 出力文字列の整形を行い，出力する．

o=""
j=-1
0.upto(27*80-1){|i|
  o<<((n[i]==1)?e[j+=1]:32)
  o<<((i%80==79)?10:"")
}

o[-10,6]=""<<39<<".join"
puts(o)


